SELECT * FROM EMPLOYEES_BKP;

COMMIT;

SELECT FIRST_NAME, COUNT(*) FROM EMPLOYEES
GROUP BY FIRST_NAME HAVING COUNT(*) > 1 ;

SELECT * FROM EMPLOYEES A WHERE ROWID < (SELECT MAX(ROWID) FROM EMPLOYEES B WHERE A.FIRST_NAME = B.FIRST_NAME); 
SELECT * FROM EMPLOYEES A WHERE ROWID > (SELECT MIN(ROWID) FROM EMPLOYEES B WHERE A.FIRST_NAME = B.FIRST_NAME); 


SELECT * FROM EMPLOYEES WHERE ROWID IN(
SELECT ROWID FROM (
SELECT FIRST_NAME, ROW_NUMBER() OVER(PARTITION BY FIRST_NAME ORDER BY FIRST_NAME) AS RNO,ROWID FROM EMPLOYEES
) WHERE RNO !=1);

SELECT FIRST_NAME FROM EMPLOYEES GROUP BY FIRST_NAME;

SELECT * FROM EMPLOYEES A, EMPLOYEES B;

SELECT SALARY, COUNT(*) FROM EMPLOYEES
GROUP BY SALARY;

SELECT * FROM EMPLOYEES WHERE ROWID IN(
SELECT ROWID FROM (
SELECT SALARY, DENSE_RANK() OVER(ORDER BY SALARY DESC) AS DRNK,ROWID FROM EMPLOYEES
) WHERE DRNK=2);

SELECT * FROM EMPLOYEES A WHERE 2 = (SELECT COUNT(DISTINCT SALARY) FROM EMPLOYEES B WHERE A.SALARY <= B.SALARY);

SELECT MAX(SALARY) FROM EMPLOYEES WHERE SALARY <> 
(SELECT MAX(SALARY) FROM EMPLOYEES WHERE SALARY <> (SELECT MAX(SALARY) FROM EMPLOYEES));
-------------------------------18-10-2023------------------------------------------------------------
SELECT * FROM (
SELECT E.*, DENSE_RANK() OVER(PARTITION BY DEPARTMENT_ID ORDER BY SALARY DESC) AS DRNK FROM EMPLOYEES E)
WHERE DRNK <= 5;

--Salary PAID for each Month and Year based on Hire Date:

SELECT TO_CHAR(HIRE_DATE,'MON-YYYY') AS HDATE, SUM(SALARY) FROM EMPLOYEES
GROUP BY TO_CHAR(HIRE_DATE,'MON-YYYY') 
ORDER BY TO_CHAR(HIRE_DATE,'MON-YYYY') ;

SELECT * FROM (
SELECT DEPARTMENT_ID, ROUND(AVG(SALARY),2) AVGDEPT FROM EMPLOYEES
WHERE DEPARTMENT_ID IS NOT NULL
GROUP BY DEPARTMENT_ID)
WHERE AVGDEPT > (SELECT AVG(SALARY) FROM EMPLOYEES); 

SELECT DEPARTMENT_ID FROM EMPLOYEES WHERE DEPARTMENT_ID IS NOT NULL
GROUP BY DEPARTMENT_ID
HAVING AVG(SALARY) > 
(SELECT AVG(SALARY) FROM EMPLOYEES);

SELECT * FROM EMPLOYEES WHERE  ROWNUM = 3; 
----------------------------------------------------------------------------------------------------
SELECT * FROM EMPLOYEES WHERE ROWID IN(SELECT DECODE(MOD(ROWNUM,2),0,ROWID,NULL) FROM EMPLOYEES) ;

SELECT * FROM EMPLOYEES WHERE MOD(EMPLOYEE_ID,2)!=0;

SELECT * FROM EMPLOYEES A WHERE 2 = (SELECT COUNT(DISTINCT SALARY) FROM EMPLOYEES B WHERE A.SALARY <= B.SALARY);

SELECT * FROM EMPLOYEES WHERE ROWNUM<=5;

SELECT * FROM EMPLOYEES
MINUS 
SELECT * FROM EMPLOYEES WHERE ROWNUM<=(SELECT COUNT(*)-5 FROM EMPLOYEES);

SELECT * FROM DEPARTMENTS;

SELECT DISTINCT DEPARTMENT_ID FROM EMPLOYEES;

SELECT DEP.DEPARTMENT_ID FROM EMPLOYEES EMP
RIGHT OUTER JOIN DEPARTMENTS DEP
ON EMP.DEPARTMENT_ID = DEP.DEPARTMENT_ID
AND ;

--Find all departments where there are no employees

SELECT * FROM DEPARTMENTS WHERE DEPARTMENT_ID 
NOT IN(SELECT DISTINCT DEPARTMENT_ID FROM EMPLOYEES WHERE DEPARTMENT_ID IS NOT NULL);

SELECT * FROM DEPARTMENTS DEP WHERE NOT EXISTS(SELECT * FROM EMPLOYEES EMP WHERE EMP.DEPARTMENT_ID=DEP.DEPARTMENT_ID);

SELECT DEP.DEPARTMENT_ID FROM 
EMPLOYEES EMP 
RIGHT OUTER JOIN
DEPARTMENTS DEP 
ON EMP.DEPARTMENT_ID=DEP.DEPARTMENT_ID
WHERE EMP.DEPARTMENT_ID IS NULL;


SELECT * FROM EMPLOYEES A WHERE 3 >= (SELECT COUNT(DISTINCT SALARY) FROM EMPLOYEES B WHERE A.SALARY <= B.SALARY);

SELECT * FROM(
SELECT A.*, DENSE_RANK() OVER(ORDER BY SALARY DESC) AS DRNK FROM EMPLOYEES A)
WHERE DRNK <=3;

SELECT * FROM EMPLOYEES WHERE SALARY IN(
SELECT SALARY FROM (
SELECT SALARY, ROWNUM R FROM(
SELECT DISTINCT(SALARY) FROM EMPLOYEES
ORDER BY SALARY DESC)
) WHERE R <= 3);

SELECT * FROM EMPLOYEES A WHERE 3 >= (SELECT COUNT(DISTINCT SALARY) FROM EMPLOYEES B WHERE A.SALARY >= B.SALARY);

SELECT * FROM(
SELECT A.*, DENSE_RANK() OVER(ORDER BY SALARY ) AS DRNK FROM EMPLOYEES A)
WHERE DRNK <=3;

SELECT * FROM EMPLOYEES WHERE SALARY IN(
SELECT SALARY FROM (
SELECT SALARY, ROWNUM R FROM(
SELECT DISTINCT(SALARY) FROM EMPLOYEES
ORDER BY SALARY)
) WHERE R <= 3);

SELECT DISTINCT FIRST_NAME FROM EMPLOYEES;

SELECT * FROM EMPLOYEES A WHERE ROWID  IN(SELECT MAX(ROWID) FROM EMPLOYEES B WHERE A.FIRST_NAME = B.FIRST_NAME);

SELECT A.*, RANK() OVER(ORDER BY FIRST_NAME) AS RNK FROM EMPLOYEES A;

SELECT * FROM EMPLOYEES WHERE SALARY IN(SELECT MAX(SALARY) FROM EMPLOYEES WHERE SALARY <> (SELECT MAX(SALARY) FROM EMPLOYEES));

SELECT DEPARTMENT_ID, COUNT(EMPLOYEE_ID) FROM EMPLOYEES
GROUP BY DEPARTMENT_ID
ORDER  BY DEPARTMENT_ID;

SELECT COUNT(EMP.EMPLOYEE_ID), DEP.DEPARTMENT_ID, DEP.DEPARTMENT_NAME
FROM EMPLOYEES EMP INNER JOIN
DEPARTMENTS DEP ON EMP.DEPARTMENT_ID = DEP.DEPARTMENT_ID
GROUP BY DEP.DEPARTMENT_ID, DEP.DEPARTMENT_NAME;

SELECT * FROM ALL_INDEXES WHERE TABLE_NAME='EMPLOYEES';

SELECT * FROM USER_INDEXES WHERE TABLE_NAME='EMPLOYEES';

SELECT * FROM USER_IND_COLUMNS WHERE TABLE_NAME='EMPLOYEES';

CREATE INDEX EMP_FUNCTION_IDX ON EMPLOYEES(UPPER(FIRST_NAME));

CREATE INDEX EMP_REVERSE_IDX ON EMPLOYEES(FIRST_NAME) REVERSE;

CREATE INDEX EMP_COMPOSITE_IDX ON EMPLOYEES(FIRST_NAME,LAST_NAME);

SELECT * FROM USER_IND_STATISTICS WHERE TABLE_NAME='EMPLOYEES';

SELECT * FROM USER_IND_EXPRESSIONS WHERE TABLE_NAME='EMPLOYEES';
---------------------------------------------------------------------

SELECT EMPLOYEE_ID, FIRST_NAME, LAST_NAME, SALARY,HIRE_DATE, SUM(SALARY) OVER(ORDER BY EMPLOYEE_ID DESC) AS RSUM FROM EMPLOYEES;
--fetch  first 5 rows only;

SELECT * FROM EMPLOYEES FETCH FIRST 5 ROWS ONLY;

SELECT EMP.*,ROW_NUMBER() OVER(PARTITION BY DEPARTMENT_ID ORDER BY SALARY DESC) AS RNO,
SUM(SALARY) OVER(PARTITION BY DEPARTMENT_ID ORDER BY SALARY DESC) AS CSUM_DEPT
FROM EMPLOYEES EMP;

--What percentage of total salary each employee gets.
SELECT EMPLOYEE_ID, FIRST_NAME, LAST_NAME, SALARY, ROUND(SALARY/(SELECT SUM(SALARY) FROM EMPLOYEES)*100,2) AS PERC FROM EMPLOYEES;

SELECT EMPLOYEE_ID, FIRST_NAME, LAST_NAME, SALARY, 
SUM(SALARY) OVER(ORDER BY EMPLOYEE_ID RANGE UNBOUNDED PRECEDING)  AS CSUM FROM EMPLOYEES;
--RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW

SELECT EMPLOYEE_ID, FIRST_NAME, LAST_NAME, SALARY, 
SUM(SALARY) OVER(ORDER BY EMPLOYEE_ID RANGE BETWEEN 2 PRECEDING AND CURRENT ROW)  AS CSUM FROM EMPLOYEES;

SELECT * FROM EMPLOYEES E1, EMPLOYEES E2, EMPLOYEES E3, EMPLOYEES E4;
--Cross Join
--Cartesian Product

--SET OPERATORS
SELECT * FROM EMPLOYEES
UNION ALL
SELECT * FROM EMPLOYEES;

SELECT * FROM EMPLOYEES
MINUS
SELECT * FROM EMPLOYEES;

SELECT * FROM EMPLOYEES
INTERSECT
SELECT * FROM EMPLOYEES;

SELECT SALARY, LENGTH(SALARY), REPLACE(SALARY,0,'')/100,LENGTH(REPLACE(SALARY,0,'')) FROM EMPLOYEES;

UPDATE EMPLOYEES E1 SET COMMISSION_PCT = (SELECT ROUND(REPLACE(SALARY,0,'')/1000,2) FROM EMPLOYEES E2
WHERE E1.EMPLOYEE_ID=E2.EMPLOYEE_ID);

COMMIT;

--------------------------
--Different types of indexes in oracle
--By Default B-Tree index, Balanced tree
--we use it if data is balanced mainly on column which most of the unique data.
--BitMap index
--Function Index
--Reverse Index
--Composite Index

--Scans
--Range Scan, Unique Scan, Full scan, Fast Full scan.

--V$SQL
--V$SQL_PLAN
--EXPLAIN PLAN
--MONITORING USAGE
--NOMONITORING USAGE

--Bitmap is used for low cardinality data like Gender, Grade, State
------------------------------------------------------------------------------------------------------
--31-OCT-2023


